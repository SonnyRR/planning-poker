using Nuke.Common;
using Nuke.Common.CI;
using Nuke.Common.Execution;
using Nuke.Common.Git;
using Nuke.Common.IO;
using Nuke.Common.ProjectModel;
using Nuke.Common.Tooling;
using Nuke.Common.Tools.DotNet;
using Nuke.Common.Tools.GitVersion;
using Nuke.Common.Utilities.Collections;
using System.Linq;
using static Nuke.Common.IO.FileSystemTasks;
using static Nuke.Common.Tools.DotNet.DotNetTasks;

[ShutdownDotNetAfterServerBuild]
class Build : NukeBuild
{
	public static int Main() => Execute<Build>(x => x.Compile);

	[Parameter("Configuration to build - Default is 'Debug' (local) or 'Release' (server)")]
	readonly Configuration Configuration = IsLocalBuild ? Configuration.Debug : Configuration.Release;

	[Solution] readonly Solution Solution;

	[PackageExecutable("mapster.tool", "Mapster.Tool.dll", Framework = "net6.0")] readonly Tool Mapster;

#pragma warning disable IDE0051 // Remove unused private members
#pragma warning disable RCS1213 // Remove unused member declaration.
	[GitRepository] readonly GitRepository GitRepository;
#pragma warning restore RCS1213 // Remove unused member declaration.
#pragma warning restore IDE0051 // Remove unused private members

	[GitVersion(Framework = "net6.0")] readonly GitVersion GitVersion;

	AbsolutePath SourceDirectory => RootDirectory / "src";
	AbsolutePath TestsDirectory => RootDirectory / "tests";
	AbsolutePath ArtifactsDirectory => RootDirectory / "artifacts";
	AbsolutePath CoreAssemblyDirectory => this.SourceDirectory / "Core";
	AbsolutePath SharedKernelAssemblyDirectory => this.SourceDirectory / "SharedKernel";

	Target Clean => _ => _
		.Before(this.Restore)
		.Executes(() =>
		{
			this.SourceDirectory.GlobDirectories("**/bin", "**/obj").ForEach(DeleteDirectory);
			this.TestsDirectory.GlobDirectories("**/bin", "**/obj").ForEach(DeleteDirectory);
			EnsureCleanDirectory(this.ArtifactsDirectory);
		});

	Target Restore => _ => _
		.Executes(() =>
		{
			DotNetRestore(s => s
				.SetProjectFile(this.Solution));
		});

	Target Compile => _ => _
		.DependsOn(this.Restore)
		.DependsOn(this.Clean)
		.Executes(() =>
		{
			DotNetBuild(s => s
				.SetProjectFile(this.Solution)
				.SetConfiguration(this.Configuration)
				.SetAssemblyVersion(this.GitVersion.AssemblySemVer)
				.SetFileVersion(this.GitVersion.AssemblySemFileVer)
				.SetInformationalVersion(this.GitVersion.InformationalVersion)
				.EnableNoRestore());
		});

	Target CleanAutogeneratedModels => _ => _
		.Executes(() =>
		{
			const string GENERATED_FILES_PATTERN = "**\\*.g.cs";

			foreach (var file in this.CoreAssemblyDirectory.GlobFiles(GENERATED_FILES_PATTERN)
				.Union(this.SharedKernelAssemblyDirectory.GlobFiles(GENERATED_FILES_PATTERN)))
			{
				DeleteFile(file);
			}
		});

	Target CodeGenerateModels => _ => _
		.DependsOn(this.CleanAutogeneratedModels)
		.Executes(() =>
		{
			const string MAPPERS_NAMEPSACE = "PlanningPoker.Core.Mapping";
			var assemblyToScan = this.CoreAssemblyDirectory / "bin" / "Debug" / "net6.0" / "PlanningPoker.Core.dll";
			var generatedFilesDir = this.CoreAssemblyDirectory / "Models" / "Generated";

			this.Mapster.Invoke($"model -a {assemblyToScan} -o {generatedFilesDir} -n PlanningPoker.SharedKernel.Models.Generated");

			DotNetBuild(s => s
				.SetProcessWorkingDirectory(this.CoreAssemblyDirectory)
				.SetProjectFile("PlanningPoker.Core.csproj")
				.SetConfiguration(this.Configuration)
			);

			this.Mapster.Invoke($"extension -a {assemblyToScan} -o {this.CoreAssemblyDirectory / "Mapping"} -n {MAPPERS_NAMEPSACE}");
			this.Mapster.Invoke($"mapper -a {assemblyToScan} -o {this.CoreAssemblyDirectory / "Mapping"} -n {MAPPERS_NAMEPSACE}");

			CopyDirectoryRecursively(generatedFilesDir, this.SharedKernelAssemblyDirectory / "Models" / "Generated", DirectoryExistsPolicy.Merge);
			DeleteDirectory(generatedFilesDir);
		});
}
