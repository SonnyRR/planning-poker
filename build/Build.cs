using System;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using JetBrains.Annotations;
using Nuke.Common;
using Nuke.Common.CI;
using Nuke.Common.Git;
using Nuke.Common.IO;
using Nuke.Common.ProjectModel;
using Nuke.Common.Tooling;
using Nuke.Common.Tools.DotNet;
using Nuke.Common.Tools.GitVersion;
using Serilog;
using static Nuke.Common.Tools.DotNet.DotNetTasks;

[ShutdownDotNetAfterServerBuild]
[SuppressMessage("ReSharper", "AllUnderscoreLocalParameterName")]
[SuppressMessage("ReSharper", "CheckNamespace")]
[SuppressMessage("Minor Code Smell", "S2325:Methods and properties that don't access instance data should be static", Justification = "Not applicable in this project.")]
internal class Build : NukeBuild
{
    private const string TFM = "net9.0";

    public static int Main() => Execute<Build>(b => b.Compile);

    [Parameter("Configuration to build - Default is 'Debug' (local) or 'Release' (server)")]
    public readonly Configuration Configuration = IsLocalBuild ? Configuration.Debug : Configuration.Release;

    [Solution]
    public readonly Solution Solution;

    [NuGetPackage("mapster.tool", "Mapster.Tool.dll", Framework = TFM)]
    public readonly Tool Mapster;

    [GitRepository]
    public readonly GitRepository GitRepository;

    [GitVersion(UpdateBuildNumber = true)]
    public readonly GitVersion GitVersion;

    [Parameter("The environment. Possible values: Development, Staging, Production")]
    public readonly string AspNetCoreEnvironment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");

    [Parameter("The Entity Framework Core migration name", Name = "migration-name")]
    public readonly string EFMigrationName = string.Empty;

    private AbsolutePath SourceDirectory => RootDirectory / "src";
    private AbsolutePath TestsDirectory => RootDirectory / "tests";
    private AbsolutePath ArtifactsDirectory => RootDirectory / "artifacts";
    private AbsolutePath CoreAssemblyDirectory => this.SourceDirectory / "Core";
    private AbsolutePath SharedKernelAssemblyDirectory => this.SourceDirectory / "SharedKernel";
    private AbsolutePath PersistenceAssemblyDirectory => this.SourceDirectory / "Persistence";
    private AbsolutePath WebApiAssemblyDirectory => this.SourceDirectory / "WebAPI";
    private AbsolutePath GeneratedAssembly => this.SourceDirectory / "Generated";

    public Target Clean => _ => _
        .Before(this.Restore)
        .Executes(() =>
        {
            this.SourceDirectory.GlobDirectories("**/{obj,bin}").DeleteDirectories();
            this.TestsDirectory.GlobDirectories("**/{obj,bin}").DeleteDirectories();
            this.ArtifactsDirectory.CreateOrCleanDirectory();
        });

    public Target Restore => _ => _
        .Executes(() =>
        {
            DotNetRestore(s => s
                .SetProjectFile(this.Solution));
        });

    public Target Compile => _ => _
        .DependsOn(this.Restore)
        .DependsOn(this.Clean)
        .Executes(() =>
        {
            DotNetBuild(s => s
                .SetProjectFile(this.Solution)
                .SetConfiguration(this.Configuration)
                .SetAssemblyVersion(this.GitVersion.AssemblySemVer)
                .SetFileVersion(this.GitVersion.AssemblySemFileVer)
                .SetInformationalVersion(this.GitVersion.InformationalVersion)
                .EnableNoRestore());

            Log.Information(this.GitVersion.MajorMinorPatch);
        });

    public Target CleanAutogeneratedModels => _ => _
        .Executes(() =>
        {
            const string GENERATED_FILES_PATTERN = "**\\*.g.cs";

            foreach (var file in this.GeneratedAssembly.GlobFiles(GENERATED_FILES_PATTERN))
            {
                Log.Information("Deleting '{@File}'", file.Name);
                file.DeleteFile();
            }
        });

    [UsedImplicitly]
    public Target CodeGenerateModels => _ => _
        .DependsOn(this.CleanAutogeneratedModels)
        .Executes(() =>
        {
            BuildGeneratedAssembly();

            var assemblyToScan = this.GeneratedAssembly / "bin" / "Debug" / TFM / "PlanningPoker.Generated.dll";

            this.Mapster.Invoke(
                $"model -a {assemblyToScan} -o {this.GeneratedAssembly / "Models"} -n PlanningPoker.Generated.Models");

            BuildGeneratedAssembly();

            var mappingDir = this.GeneratedAssembly / "Mapping";
            const string MAPPERS_NAMESPACE = "PlanningPoker.Generated.Mapping";

            this.Mapster.Invoke(
                $"extension -a {assemblyToScan} -o {mappingDir} -n {MAPPERS_NAMESPACE}");
            this.Mapster.Invoke(
                $"mapper -a {assemblyToScan} -o {mappingDir} -n {MAPPERS_NAMESPACE}");

            void BuildGeneratedAssembly()
            {
                DotNetBuild(s => s
                    .SetProcessWorkingDirectory(this.GeneratedAssembly)
                    .SetProjectFile("PlanningPoker.Generated.csproj")
                    .SetConfiguration(this.Configuration)
                    .AddProcessEnvironmentVariable("MapsterContext", "MAPSTER_CONTEXT")
                );
            }
        });

    [UsedImplicitly]
    public Target ApplyMigrations => _ => _
        .OnlyWhenStatic(this.IsLocalEnvironment)
        .Executes(() =>
            DotNet($@"ef database update -s ""{this.WebApiAssemblyDirectory}""", this.PersistenceAssemblyDirectory));

    [UsedImplicitly]
    public Target DropDatabase => _ => _
        .OnlyWhenStatic(this.IsLocalEnvironment)
        .Executes(() =>
            DotNet($@"ef database drop -s ""{this.WebApiAssemblyDirectory}""", this.PersistenceAssemblyDirectory));

    [UsedImplicitly]
    public Target CreateMigration => _ => _
        .OnlyWhenStatic(this.IsLocalEnvironment)
        .Requires(() => this.EFMigrationName)
        .Executes(() =>
            DotNet($@"ef migrations add {this.EFMigrationName} -s ""{this.WebApiAssemblyDirectory}""", this.PersistenceAssemblyDirectory));

    [UsedImplicitly]
    public Target RemoveLastMigration => _ => _
        .OnlyWhenStatic(this.IsLocalEnvironment)
        .Executes(() =>
            DotNet($@"ef migrations remove -s ""{this.WebApiAssemblyDirectory}""", this.PersistenceAssemblyDirectory));

    private bool IsLocalEnvironment()
    {
        return IsLocalBuild && this.AspNetCoreEnvironment == Environments.Development;
    }
}