// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlanningPoker.Persistence;

#nullable disable

namespace PlanningPoker.Persistence.Migrations
{
    [DbContext(typeof(PlanningPokerDbContext))]
    [Migration("20240127132834_UpdateDeckCardMappigns")]
    partial class UpdateDeckCardMappigns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resources")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UnicodeValue")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(4)");

                    b.Property<float>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.HasIndex("UnicodeValue")
                        .IsUnique();

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0dc6082-0daf-45d1-989b-ac0dcbac10f5"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3403), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "0",
                            Value = 0f
                        },
                        new
                        {
                            Id = new Guid("92242626-dbf5-4888-8876-66cb9d088e02"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3405), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "1",
                            Value = 1f
                        },
                        new
                        {
                            Id = new Guid("d64d6b00-b364-468c-b138-473df4a484cb"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3406), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "½",
                            Value = 0.5f
                        },
                        new
                        {
                            Id = new Guid("911bdb42-7f5f-4431-9d11-95d63672edd9"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3407), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "2",
                            Value = 2f
                        },
                        new
                        {
                            Id = new Guid("d39ad4fa-3273-47ef-b46c-01ac37588c15"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3408), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "3",
                            Value = 3f
                        },
                        new
                        {
                            Id = new Guid("12278530-7958-436a-a5a4-cf44daaaf95e"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3408), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "5",
                            Value = 5f
                        },
                        new
                        {
                            Id = new Guid("b4c84e42-d1cc-40a6-8e6b-7028016cb8f6"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3409), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "8",
                            Value = 8f
                        },
                        new
                        {
                            Id = new Guid("d1e36f3e-1c12-417f-b60c-4e1fb1f62795"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3410), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "13",
                            Value = 13f
                        },
                        new
                        {
                            Id = new Guid("351e04c7-f70a-4f08-bec1-17282e7ceda8"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3411), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "20",
                            Value = 20f
                        },
                        new
                        {
                            Id = new Guid("417d0c96-00c3-4cdb-b39c-2da688c80b87"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3411), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "21",
                            Value = 21f
                        },
                        new
                        {
                            Id = new Guid("de6e7f04-3b9e-4913-a5a0-1bf16ec0bf0b"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3412), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "34",
                            Value = 34f
                        },
                        new
                        {
                            Id = new Guid("589c0ebd-cebd-4efd-9440-d1a98e3bd744"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3413), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "40",
                            Value = 40f
                        },
                        new
                        {
                            Id = new Guid("df9c7caa-46a1-485b-a9de-730137706624"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3413), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "55",
                            Value = 55f
                        },
                        new
                        {
                            Id = new Guid("7bab12bd-53e0-4034-9f52-36b3a02c25ae"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3414), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "80",
                            Value = 80f
                        },
                        new
                        {
                            Id = new Guid("3def24db-bf68-490b-81c5-c52220e9d7ea"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3415), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "89",
                            Value = 89f
                        },
                        new
                        {
                            Id = new Guid("4d302d7d-8ce3-4b04-9b67-5d359d6b96c3"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3416), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "100",
                            Value = 100f
                        },
                        new
                        {
                            Id = new Guid("b2e3dd14-a3be-4506-a9a2-160d3b4bf5dd"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3417), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "XXS",
                            Value = 1f
                        },
                        new
                        {
                            Id = new Guid("7fc35e2b-4fbe-4f36-b1e2-2a92f05f2a05"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3418), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "XS",
                            Value = 2f
                        },
                        new
                        {
                            Id = new Guid("01960104-3034-4735-b7e9-9831f00d33e5"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3419), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "S",
                            Value = 3f
                        },
                        new
                        {
                            Id = new Guid("cc871e03-1cc9-461b-85a8-b71a022fad67"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3419), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "M",
                            Value = 5f
                        },
                        new
                        {
                            Id = new Guid("670f5580-30c8-4c64-9930-d3132e14cfd9"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3420), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "L",
                            Value = 8f
                        },
                        new
                        {
                            Id = new Guid("80e1dce7-a389-4778-863b-a5ec23b5d62f"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3421), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "XL",
                            Value = 13f
                        },
                        new
                        {
                            Id = new Guid("f8eba7c5-879e-4df6-b0a8-ea5f02d8da51"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3421), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "XXL",
                            Value = 21f
                        },
                        new
                        {
                            Id = new Guid("1f7ab1e7-b95f-4016-b93d-5aeaae7b0f08"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3422), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "☕",
                            Value = 0f
                        },
                        new
                        {
                            Id = new Guid("59f79917-dc46-4d30-a112-851c14c4d780"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(3423), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            UnicodeValue = "?",
                            Value = 0f
                        });
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.Deck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Decks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9"),
                            CreatedOn = new DateTimeOffset(new DateTime(2024, 1, 27, 13, 28, 34, 47, DateTimeKind.Unspecified).AddTicks(5280), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Type = "Fibonacci"
                        });
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.DeckCard", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CardId", "DeckId");

                    b.HasIndex("DeckId");

                    b.ToTable("DeckCards");

                    b.HasData(
                        new
                        {
                            CardId = new Guid("a0dc6082-0daf-45d1-989b-ac0dcbac10f5"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("92242626-dbf5-4888-8876-66cb9d088e02"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("911bdb42-7f5f-4431-9d11-95d63672edd9"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("d39ad4fa-3273-47ef-b46c-01ac37588c15"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("12278530-7958-436a-a5a4-cf44daaaf95e"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("b4c84e42-d1cc-40a6-8e6b-7028016cb8f6"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("d1e36f3e-1c12-417f-b60c-4e1fb1f62795"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("417d0c96-00c3-4cdb-b39c-2da688c80b87"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("de6e7f04-3b9e-4913-a5a0-1bf16ec0bf0b"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("df9c7caa-46a1-485b-a9de-730137706624"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("3def24db-bf68-490b-81c5-c52220e9d7ea"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        },
                        new
                        {
                            CardId = new Guid("59f79917-dc46-4d30-a112-851c14c4d780"),
                            DeckId = new Guid("6df8d39e-267d-4396-9e41-fa969fe3e9d9")
                        });
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TableUser", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayersId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("PlayerTables", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanningPoker.Persistence.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.DeckCard", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanningPoker.Persistence.Entities.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("PlanningPoker.Persistence.Entities.Table", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanningPoker.Persistence.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TableUser", b =>
                {
                    b.HasOne("PlanningPoker.Persistence.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlanningPoker.Persistence.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
